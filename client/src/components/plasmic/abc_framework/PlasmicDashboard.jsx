// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vpcYHrXbsH6LUnbKFzgKAs
// Component: UwWUDm9S7t
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: b995Ls5eZP/component
import ActionIcon from "../../ActionIcon"; // plasmic-import: 7MQ1w3J5JA/component
import ModalWrapper from "../../ModalWrapper"; // plasmic-import: MWE-QmNJhs/component
import ProgramsList from "../../ProgramsList"; // plasmic-import: MYCwyjoLXCa/component
import ResearchProgramCard from "../../ResearchProgramCard"; // plasmic-import: VmjFCzlhl8/component
import Modal from "../../Modal"; // plasmic-import: DJ5ohi16iS/component
import Button from "../../Button"; // plasmic-import: ryMEoCge3-/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Ua1ivJLBAEJb/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_abc_framework.module.css"; // plasmic-import: vpcYHrXbsH6LUnbKFzgKAs/projectcss
import * as sty from "./PlasmicDashboard.module.css"; // plasmic-import: UwWUDm9S7t/css
import LogosvgIcon from "./icons/PlasmicIcon__Logosvg"; // plasmic-import: 67BwsWVLcL/icon
import PlusCircleOutlinesvgIcon from "./icons/PlasmicIcon__PlusCircleOutlinesvg"; // plasmic-import: 7Ds520VAXj/icon

export const PlasmicDashboard__VariantProps = new Array(
  "empty",
  "withAddStudy"
);

export const PlasmicDashboard__ArgProps = new Array("programs");

function PlasmicDashboard__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
          [sty.root__empty]: hasVariant(variants, "empty", "empty"),
          [sty.root__withAddStudy]: hasVariant(
            variants,
            "withAddStudy",
            "withAddStudy"
          )
        })}
      >
        <Header
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          className={classNames("__wab_instance", sty.header, {
            [sty.header__withAddStudy]: hasVariant(
              variants,
              "withAddStudy",
              "withAddStudy"
            )
          })}
          left={
            <p.Stack
              as={"div"}
              data-plasmic-name={"logoArea"}
              data-plasmic-override={overrides.logoArea}
              hasGap={true}
              className={classNames(defaultcss.all, sty.logoArea)}
            >
              <ActionIcon
                data-plasmic-name={"actionIcon"}
                data-plasmic-override={overrides.actionIcon}
                large={"large"}
              >
                <LogosvgIcon
                  className={classNames(defaultcss.all, sty.svg__yxAx1)}
                  role={"img"}
                />
              </ActionIcon>

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? false
                  : true
              ) ? (
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__phwDc
                  )}
                >
                  {"ABC Framework"}
                </div>
              ) : null}
            </p.Stack>
          }
        />

        {(
          hasVariant(variants, "withAddStudy", "withAddStudy") ? true : false
        ) ? (
          <ModalWrapper
            data-plasmic-name={"modalWrapper"}
            data-plasmic-override={overrides.modalWrapper}
            className={classNames("__wab_instance", sty.modalWrapper, {
              [sty.modalWrapper__withAddStudy]: hasVariant(
                variants,
                "withAddStudy",
                "withAddStudy"
              )
            })}
            withAddStudy={
              hasVariant(variants, "withAddStudy", "withAddStudy")
                ? "withAddStudy"
                : undefined
            }
          />
        ) : null}

        <ProgramsList
          data-plasmic-name={"programsList"}
          data-plasmic-override={overrides.programsList}
          className={classNames("__wab_instance", sty.programsList, {
            [sty.programsList__empty]: hasVariant(variants, "empty", "empty"),
            [sty.programsList__withAddStudy]: hasVariant(
              variants,
              "withAddStudy",
              "withAddStudy"
            )
          })}
          empty={hasVariant(variants, "empty", "empty") ? "empty" : undefined}
        >
          <p.PlasmicSlot
            defaultContents={
              <React.Fragment>
                <ResearchProgramCard
                  className={classNames(
                    "__wab_instance",
                    sty.researchProgramCard__ds9Hs
                  )}
                />

                <ResearchProgramCard
                  className={classNames(
                    "__wab_instance",
                    sty.researchProgramCard__bvWc2
                  )}
                  description={"Scalable applications and its demands"}
                  registered={"Registered studies: 2/10"}
                  title={"Scalable applications"}
                />

                <ResearchProgramCard
                  className={classNames(
                    "__wab_instance",
                    sty.researchProgramCard__bqQx
                  )}
                />

                <ResearchProgramCard
                  className={classNames(
                    "__wab_instance",
                    sty.researchProgramCard__z0Azf
                  )}
                  description={
                    "A study program about how study methodology impacts students results A study program about how study methodology impacts students results"
                  }
                />

                <ResearchProgramCard
                  className={classNames(
                    "__wab_instance",
                    sty.researchProgramCard__f0Ut
                  )}
                  description={
                    "A study program about how study methodology impacts students results A study program about how study methodology impacts students results"
                  }
                />
              </React.Fragment>
            }
            value={args.programs}
          />
        </ProgramsList>

        <ActionIcon
          data-plasmic-name={"addProgram"}
          data-plasmic-override={overrides.addProgram}
          className={classNames("__wab_instance", sty.addProgram)}
        >
          <div
            className={classNames(defaultcss.all, sty.box__bkfwA, {
              [sty.box__empty__bkfwAw9A7F]: hasVariant(
                variants,
                "empty",
                "empty"
              )
            })}
          >
            <PlusCircleOutlinesvgIcon
              className={classNames(defaultcss.all, sty.svg__pcCn)}
              role={"img"}
            />
          </div>
        </ActionIcon>

        {false ? (
          <div
            data-plasmic-name={"editStudyBackground"}
            data-plasmic-override={overrides.editStudyBackground}
            className={classNames(defaultcss.all, sty.editStudyBackground)}
          >
            {false ? (
              <Modal
                data-plasmic-name={"modal"}
                data-plasmic-override={overrides.modal}
                className={classNames("__wab_instance", sty.modal)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__fwAm5
                  )}
                >
                  {"Adicione seu programa de pesquisa"}
                </div>

                {false ? (
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box___4QHx
                    )}
                  >
                    {"Enter some text"}
                  </div>
                ) : null}

                <input
                  data-plasmic-name={"textbox"}
                  data-plasmic-override={overrides.textbox}
                  className={classNames(defaultcss.input, sty.textbox)}
                  placeholder={"Título"}
                  size={1}
                  type={"text"}
                  value={""}
                />

                <textarea
                  data-plasmic-name={"textarea"}
                  data-plasmic-override={overrides.textarea}
                  className={classNames(defaultcss.textarea, sty.textarea)}
                  placeholder={"Descrição"}
                  value={""}
                />

                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                >
                  {"Adicionar"}
                </Button>
              </Modal>
            ) : null}
          </div>
        ) : null}
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "logoArea",
    "actionIcon",
    "modalWrapper",
    "programsList",
    "addProgram",
    "editStudyBackground",
    "modal",
    "textbox",
    "textarea",
    "button"
  ],

  header: ["header", "logoArea", "actionIcon"],
  logoArea: ["logoArea", "actionIcon"],
  actionIcon: ["actionIcon"],
  modalWrapper: ["modalWrapper"],
  programsList: ["programsList"],
  addProgram: ["addProgram"],
  editStudyBackground: [
    "editStudyBackground",
    "modal",
    "textbox",
    "textarea",
    "button"
  ],

  modal: ["modal", "textbox", "textarea", "button"],
  textbox: ["textbox"],
  textarea: ["textarea"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDashboard__ArgProps,
      internalVariantPropNames: PlasmicDashboard__VariantProps
    });

    return PlasmicDashboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDashboard";
  } else {
    func.displayName = `PlasmicDashboard.${nodeName}`;
  }
  return func;
}

export const PlasmicDashboard = Object.assign(
  // Top-level PlasmicDashboard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    logoArea: makeNodeComponent("logoArea"),
    actionIcon: makeNodeComponent("actionIcon"),
    modalWrapper: makeNodeComponent("modalWrapper"),
    programsList: makeNodeComponent("programsList"),
    addProgram: makeNodeComponent("addProgram"),
    editStudyBackground: makeNodeComponent("editStudyBackground"),
    modal: makeNodeComponent("modal"),
    textbox: makeNodeComponent("textbox"),
    textarea: makeNodeComponent("textarea"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicDashboard
    internalVariantProps: PlasmicDashboard__VariantProps,
    internalArgProps: PlasmicDashboard__ArgProps
  }
);

export default PlasmicDashboard;
/* prettier-ignore-end */
