// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vpcYHrXbsH6LUnbKFzgKAs
// Component: GYWi95vLfh
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: b995Ls5eZP/component
import ActionIcon from "../../ActionIcon"; // plasmic-import: 7MQ1w3J5JA/component
import SelectedResearch from "../../SelectedResearch"; // plasmic-import: gK4A7lO4Rf/component
import SelectedStrategy from "../../SelectedStrategy"; // plasmic-import: p3zItY3nmn/component
import Modal from "../../Modal"; // plasmic-import: DJ5ohi16iS/component
import Button from "../../Button"; // plasmic-import: ryMEoCge3-/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Ua1ivJLBAEJb/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_abc_framework.module.css"; // plasmic-import: vpcYHrXbsH6LUnbKFzgKAs/projectcss
import * as sty from "./PlasmicResearchProgram.module.css"; // plasmic-import: GYWi95vLfh/css
import ShortLeftsvgIcon from "./icons/PlasmicIcon__ShortLeftsvg"; // plasmic-import: -0ehSsBe3P/icon
import LogosvgIcon from "./icons/PlasmicIcon__Logosvg"; // plasmic-import: 67BwsWVLcL/icon
import PlusCircleOutlinesvgIcon from "./icons/PlasmicIcon__PlusCircleOutlinesvg"; // plasmic-import: 7Ds520VAXj/icon

export const PlasmicResearchProgram__VariantProps = new Array(
  "withAddResearch"
);

export const PlasmicResearchProgram__ArgProps = new Array(
  "programStudyVisualizer"
);

function PlasmicResearchProgram__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
          [sty.root__withAddResearch]: hasVariant(
            variants,
            "withAddResearch",
            "withAddResearch"
          )
        })}
      >
        <Header
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          className={classNames("__wab_instance", sty.header)}
          left={
            <React.Fragment>
              <ActionIcon
                data-plasmic-name={"actionIcon"}
                data-plasmic-override={overrides.actionIcon}
                className={classNames("__wab_instance", sty.actionIcon)}
                large={"large"}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <ShortLeftsvgIcon
                    className={classNames(defaultcss.all, sty.svg__nq7E)}
                    role={"img"}
                  />
                ) : null}

                <LogosvgIcon
                  className={classNames(defaultcss.all, sty.svg__o3D)}
                  role={"img"}
                />
              </ActionIcon>

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? false
                  : true
              ) ? (
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__fjwXm
                  )}
                >
                  {"ABC Framework"}
                </div>
              ) : null}
            </React.Fragment>
          }
        />

        <p.Stack
          as={"div"}
          data-plasmic-name={"view"}
          data-plasmic-override={overrides.view}
          hasGap={true}
          className={classNames(defaultcss.all, sty.view)}
        >
          <div className={classNames(defaultcss.all, sty.box__kgQf)}>
            <p.PlasmicSlot
              defaultContents={
                <div className={classNames(defaultcss.all, sty.box__q1I87)} />
              }
              value={args.programStudyVisualizer}
            />
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"studyInfo"}
            data-plasmic-override={overrides.studyInfo}
            hasGap={true}
            className={classNames(defaultcss.all, sty.studyInfo)}
          >
            <SelectedResearch
              data-plasmic-name={"selectedResearch"}
              data-plasmic-override={overrides.selectedResearch}
              className={classNames("__wab_instance", sty.selectedResearch)}
            />

            <SelectedStrategy
              data-plasmic-name={"selectedStrategy"}
              data-plasmic-override={overrides.selectedStrategy}
              className={classNames("__wab_instance", sty.selectedStrategy)}
            />
          </p.Stack>
        </p.Stack>

        <ActionIcon
          data-plasmic-name={"openModalButton"}
          data-plasmic-override={overrides.openModalButton}
          className={classNames("__wab_instance", sty.openModalButton)}
        >
          <div className={classNames(defaultcss.all, sty.box__pLomL)}>
            <PlusCircleOutlinesvgIcon
              className={classNames(defaultcss.all, sty.svg__seNzx)}
              role={"img"}
            />
          </div>
        </ActionIcon>

        {(
          hasVariant(variants, "withAddResearch", "withAddResearch")
            ? true
            : false
        ) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"withAddResearchModal"}
            data-plasmic-override={overrides.withAddResearchModal}
            hasGap={
              hasVariant(variants, "withAddResearch", "withAddResearch")
                ? true
                : false
            }
            className={classNames(defaultcss.all, sty.withAddResearchModal, {
              [sty.withAddResearchModal__withAddResearch]: hasVariant(
                variants,
                "withAddResearch",
                "withAddResearch"
              )
            })}
          >
            {(
              hasVariant(variants, "withAddResearch", "withAddResearch")
                ? true
                : false
            ) ? (
              <Modal
                data-plasmic-name={"modal"}
                data-plasmic-override={overrides.modal}
                className={classNames("__wab_instance", sty.modal, {
                  [sty.modal__withAddResearch]: hasVariant(
                    variants,
                    "withAddResearch",
                    "withAddResearch"
                  )
                })}
              >
                {(
                  hasVariant(variants, "withAddResearch", "withAddResearch")
                    ? false
                    : true
                ) ? (
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__qzTd4,
                      {
                        [sty.box__withAddResearch__qzTd4GcXLs]: hasVariant(
                          variants,
                          "withAddResearch",
                          "withAddResearch"
                        )
                      }
                    )}
                  >
                    {"Adicione seu programa de pesquisa"}
                  </div>
                ) : null}
                {(
                  hasVariant(variants, "withAddResearch", "withAddResearch")
                    ? false
                    : true
                ) ? (
                  <input
                    data-plasmic-name={"textbox"}
                    data-plasmic-override={overrides.textbox}
                    className={classNames(defaultcss.input, sty.textbox, {
                      [sty.textbox__withAddResearch]: hasVariant(
                        variants,
                        "withAddResearch",
                        "withAddResearch"
                      )
                    })}
                    placeholder={"Título"}
                    size={1}
                    type={"text"}
                    value={""}
                  />
                ) : null}
                {(
                  hasVariant(variants, "withAddResearch", "withAddResearch")
                    ? false
                    : true
                ) ? (
                  <textarea
                    data-plasmic-name={"textarea"}
                    data-plasmic-override={overrides.textarea}
                    className={classNames(defaultcss.textarea, sty.textarea, {
                      [sty.textarea__withAddResearch]: hasVariant(
                        variants,
                        "withAddResearch",
                        "withAddResearch"
                      )
                    })}
                    placeholder={"Descrição"}
                    value={""}
                  />
                ) : null}
                {(
                  hasVariant(variants, "withAddResearch", "withAddResearch")
                    ? false
                    : true
                ) ? (
                  <Button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button, {
                      [sty.button__withAddResearch]: hasVariant(
                        variants,
                        "withAddResearch",
                        "withAddResearch"
                      )
                    })}
                  >
                    {"Adicionar"}
                  </Button>
                ) : null}
                {(
                  hasVariant(variants, "withAddResearch", "withAddResearch")
                    ? true
                    : false
                ) ? (
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__ycfPd,
                      {
                        [sty.box__withAddResearch__ycfPdGcXLs]: hasVariant(
                          variants,
                          "withAddResearch",
                          "withAddResearch"
                        )
                      }
                    )}
                  >
                    {hasVariant(variants, "withAddResearch", "withAddResearch")
                      ? "Adicione uma nova pesquisa"
                      : "Enter some text"}
                  </div>
                ) : null}
                {(
                  hasVariant(variants, "withAddResearch", "withAddResearch")
                    ? true
                    : false
                ) ? (
                  <input
                    data-plasmic-name={"title"}
                    data-plasmic-override={overrides.title}
                    className={classNames(defaultcss.input, sty.title, {
                      [sty.title__withAddResearch]: hasVariant(
                        variants,
                        "withAddResearch",
                        "withAddResearch"
                      )
                    })}
                    placeholder={
                      hasVariant(variants, "withAddResearch", "withAddResearch")
                        ? "Titúlo"
                        : "Some placeholder"
                    }
                    size={1}
                    type={"text"}
                    value={
                      hasVariant(variants, "withAddResearch", "withAddResearch")
                        ? ""
                        : "Some value"
                    }
                  />
                ) : null}
                {(
                  hasVariant(variants, "withAddResearch", "withAddResearch")
                    ? true
                    : false
                ) ? (
                  <textarea
                    data-plasmic-name={"description"}
                    data-plasmic-override={overrides.description}
                    className={classNames(
                      defaultcss.textarea,
                      sty.description,
                      {
                        [sty.description__withAddResearch]: hasVariant(
                          variants,
                          "withAddResearch",
                          "withAddResearch"
                        )
                      }
                    )}
                    placeholder={
                      hasVariant(variants, "withAddResearch", "withAddResearch")
                        ? "Descrição"
                        : undefined
                    }
                    value={
                      hasVariant(variants, "withAddResearch", "withAddResearch")
                        ? ""
                        : "This is a text area."
                    }
                  />
                ) : null}
                {(
                  hasVariant(variants, "withAddResearch", "withAddResearch")
                    ? true
                    : false
                ) ? (
                  <input
                    data-plasmic-name={"link"}
                    data-plasmic-override={overrides.link}
                    className={classNames(defaultcss.input, sty.link, {
                      [sty.link__withAddResearch]: hasVariant(
                        variants,
                        "withAddResearch",
                        "withAddResearch"
                      )
                    })}
                    placeholder={
                      hasVariant(variants, "withAddResearch", "withAddResearch")
                        ? "Link"
                        : "Some placeholder"
                    }
                    size={1}
                    type={"text"}
                    value={
                      hasVariant(variants, "withAddResearch", "withAddResearch")
                        ? ""
                        : "Some value"
                    }
                  />
                ) : null}
                {(
                  hasVariant(variants, "withAddResearch", "withAddResearch")
                    ? true
                    : false
                ) ? (
                  <input
                    data-plasmic-name={"strategy"}
                    data-plasmic-override={overrides.strategy}
                    className={classNames(defaultcss.input, sty.strategy, {
                      [sty.strategy__withAddResearch]: hasVariant(
                        variants,
                        "withAddResearch",
                        "withAddResearch"
                      )
                    })}
                    placeholder={
                      hasVariant(variants, "withAddResearch", "withAddResearch")
                        ? "Estratégia"
                        : "Some placeholder"
                    }
                    size={1}
                    type={"text"}
                    value={
                      hasVariant(variants, "withAddResearch", "withAddResearch")
                        ? ""
                        : "Some value"
                    }
                  />
                ) : null}
                {(
                  hasVariant(variants, "withAddResearch", "withAddResearch")
                    ? true
                    : false
                ) ? (
                  <input
                    data-plasmic-name={"method"}
                    data-plasmic-override={overrides.method}
                    className={classNames(defaultcss.input, sty.method, {
                      [sty.method__withAddResearch]: hasVariant(
                        variants,
                        "withAddResearch",
                        "withAddResearch"
                      )
                    })}
                    placeholder={
                      hasVariant(variants, "withAddResearch", "withAddResearch")
                        ? "Método"
                        : "Some placeholder"
                    }
                    size={1}
                    type={"text"}
                    value={
                      hasVariant(variants, "withAddResearch", "withAddResearch")
                        ? ""
                        : "Some value"
                    }
                  />
                ) : null}
                {(
                  hasVariant(variants, "withAddResearch", "withAddResearch")
                    ? true
                    : false
                ) ? (
                  <Button
                    data-plasmic-name={"addResearch"}
                    data-plasmic-override={overrides.addResearch}
                    className={classNames("__wab_instance", sty.addResearch, {
                      [sty.addResearch__withAddResearch]: hasVariant(
                        variants,
                        "withAddResearch",
                        "withAddResearch"
                      )
                    })}
                  >
                    {hasVariant(variants, "withAddResearch", "withAddResearch")
                      ? "Adicionar"
                      : "Click me"}
                  </Button>
                ) : null}
              </Modal>
            ) : null}
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "actionIcon",
    "view",
    "studyInfo",
    "selectedResearch",
    "selectedStrategy",
    "openModalButton",
    "withAddResearchModal",
    "modal",
    "textbox",
    "textarea",
    "button",
    "title",
    "description",
    "link",
    "strategy",
    "method",
    "addResearch"
  ],

  header: ["header", "actionIcon"],
  actionIcon: ["actionIcon"],
  view: ["view", "studyInfo", "selectedResearch", "selectedStrategy"],
  studyInfo: ["studyInfo", "selectedResearch", "selectedStrategy"],
  selectedResearch: ["selectedResearch"],
  selectedStrategy: ["selectedStrategy"],
  openModalButton: ["openModalButton"],
  withAddResearchModal: [
    "withAddResearchModal",
    "modal",
    "textbox",
    "textarea",
    "button",
    "title",
    "description",
    "link",
    "strategy",
    "method",
    "addResearch"
  ],

  modal: [
    "modal",
    "textbox",
    "textarea",
    "button",
    "title",
    "description",
    "link",
    "strategy",
    "method",
    "addResearch"
  ],

  textbox: ["textbox"],
  textarea: ["textarea"],
  button: ["button"],
  title: ["title"],
  description: ["description"],
  link: ["link"],
  strategy: ["strategy"],
  method: ["method"],
  addResearch: ["addResearch"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicResearchProgram__ArgProps,
      internalVariantPropNames: PlasmicResearchProgram__VariantProps
    });

    return PlasmicResearchProgram__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicResearchProgram";
  } else {
    func.displayName = `PlasmicResearchProgram.${nodeName}`;
  }
  return func;
}

export const PlasmicResearchProgram = Object.assign(
  // Top-level PlasmicResearchProgram renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    actionIcon: makeNodeComponent("actionIcon"),
    view: makeNodeComponent("view"),
    studyInfo: makeNodeComponent("studyInfo"),
    selectedResearch: makeNodeComponent("selectedResearch"),
    selectedStrategy: makeNodeComponent("selectedStrategy"),
    openModalButton: makeNodeComponent("openModalButton"),
    withAddResearchModal: makeNodeComponent("withAddResearchModal"),
    modal: makeNodeComponent("modal"),
    textbox: makeNodeComponent("textbox"),
    textarea: makeNodeComponent("textarea"),
    button: makeNodeComponent("button"),
    title: makeNodeComponent("title"),
    description: makeNodeComponent("description"),
    link: makeNodeComponent("link"),
    strategy: makeNodeComponent("strategy"),
    method: makeNodeComponent("method"),
    addResearch: makeNodeComponent("addResearch"),
    // Metadata about props expected for PlasmicResearchProgram
    internalVariantProps: PlasmicResearchProgram__VariantProps,
    internalArgProps: PlasmicResearchProgram__ArgProps
  }
);

export default PlasmicResearchProgram;
/* prettier-ignore-end */
