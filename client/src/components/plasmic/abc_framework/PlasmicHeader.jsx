// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vpcYHrXbsH6LUnbKFzgKAs
// Component: b995Ls5eZP
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import ActionIcon from "../../ActionIcon"; // plasmic-import: 7MQ1w3J5JA/component
import Spacer from "../../Spacer"; // plasmic-import: wbJ6PfISy8/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_abc_framework.module.css"; // plasmic-import: vpcYHrXbsH6LUnbKFzgKAs/projectcss
import * as sty from "./PlasmicHeader.module.css"; // plasmic-import: b995Ls5eZP/css
import LogosvgIcon from "./icons/PlasmicIcon__Logosvg"; // plasmic-import: 67BwsWVLcL/icon

export const PlasmicHeader__VariantProps = new Array("withUserOptions");

export const PlasmicHeader__ArgProps = new Array("left", "options");

function PlasmicHeader__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__withUserOptions]: hasVariant(
          variants,
          "withUserOptions",
          "withUserOptions"
        )
      })}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"logoAreaContainer"}
        data-plasmic-override={overrides.logoAreaContainer}
        hasGap={true}
        className={classNames(defaultcss.all, sty.logoAreaContainer)}
      >
        <p.PlasmicSlot
          defaultContents={
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__pwQlb)}
            >
              <ActionIcon large={"large"}>
                <LogosvgIcon
                  className={classNames(defaultcss.all, sty.svg___8759U)}
                  role={"img"}
                />
              </ActionIcon>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box___53Q1R
                )}
              >
                {"ABC Framework"}
              </div>
            </p.Stack>
          }
          value={args.left}
        />
      </p.Stack>

      <Spacer
        data-plasmic-name={"spacer"}
        data-plasmic-override={overrides.spacer}
        className={classNames("__wab_instance", sty.spacer)}
      />

      <ActionIcon
        data-plasmic-name={"userPic"}
        data-plasmic-override={overrides.userPic}
        className={classNames("__wab_instance", sty.userPic)}
        large={"large"}
      >
        <div
          data-plasmic-name={"placeholdPic"}
          data-plasmic-override={overrides.placeholdPic}
          className={classNames(defaultcss.all, sty.placeholdPic, {
            [sty.placeholdPic__withUserOptions]: hasVariant(
              variants,
              "withUserOptions",
              "withUserOptions"
            )
          })}
        />
      </ActionIcon>

      {(
        hasVariant(variants, "withUserOptions", "withUserOptions")
          ? true
          : false
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"options"}
          data-plasmic-override={overrides.options}
          hasGap={
            hasVariant(variants, "withUserOptions", "withUserOptions")
              ? true
              : false
          }
          className={classNames(defaultcss.all, sty.options, {
            [sty.options__withUserOptions]: hasVariant(
              variants,
              "withUserOptions",
              "withUserOptions"
            )
          })}
        >
          <p.PlasmicSlot
            defaultContents={
              <div className={classNames(defaultcss.all, sty.box__cBFg8)}>
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__uCAkG
                  )}
                >
                  {"Logout"}
                </div>
              </div>
            }
            value={args.options}
          />
        </p.Stack>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "logoAreaContainer",
    "spacer",
    "userPic",
    "placeholdPic",
    "options"
  ],

  logoAreaContainer: ["logoAreaContainer"],
  spacer: ["spacer"],
  userPic: ["userPic", "placeholdPic"],
  placeholdPic: ["placeholdPic"],
  options: ["options"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeader__ArgProps,
      internalVariantPropNames: PlasmicHeader__VariantProps
    });

    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logoAreaContainer: makeNodeComponent("logoAreaContainer"),
    spacer: makeNodeComponent("spacer"),
    userPic: makeNodeComponent("userPic"),
    placeholdPic: makeNodeComponent("placeholdPic"),
    options: makeNodeComponent("options"),
    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
