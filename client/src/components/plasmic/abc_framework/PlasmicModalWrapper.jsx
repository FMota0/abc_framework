// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vpcYHrXbsH6LUnbKFzgKAs
// Component: MWE-QmNJhs
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Modal from "../../Modal"; // plasmic-import: DJ5ohi16iS/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_abc_framework.module.css"; // plasmic-import: vpcYHrXbsH6LUnbKFzgKAs/projectcss
import * as sty from "./PlasmicModalWrapper.module.css"; // plasmic-import: MWE-QmNJhs/css

export const PlasmicModalWrapper__VariantProps = new Array("withAddStudy");

export const PlasmicModalWrapper__ArgProps = new Array();

function PlasmicModalWrapper__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    hasVariant(variants, "withAddStudy", "withAddStudy") ? true : false
  ) ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__withAddStudy]: hasVariant(
          variants,
          "withAddStudy",
          "withAddStudy"
        )
      })}
    >
      {(hasVariant(variants, "withAddStudy", "withAddStudy") ? true : false) ? (
        <Modal
          data-plasmic-name={"modal"}
          data-plasmic-override={overrides.modal}
        />
      ) : null}
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root", "modal"],
  modal: ["modal"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicModalWrapper__ArgProps,
      internalVariantPropNames: PlasmicModalWrapper__VariantProps
    });

    return PlasmicModalWrapper__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicModalWrapper";
  } else {
    func.displayName = `PlasmicModalWrapper.${nodeName}`;
  }
  return func;
}

export const PlasmicModalWrapper = Object.assign(
  // Top-level PlasmicModalWrapper renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    modal: makeNodeComponent("modal"),
    // Metadata about props expected for PlasmicModalWrapper
    internalVariantProps: PlasmicModalWrapper__VariantProps,
    internalArgProps: PlasmicModalWrapper__ArgProps
  }
);

export default PlasmicModalWrapper;
/* prettier-ignore-end */
