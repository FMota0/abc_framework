// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vpcYHrXbsH6LUnbKFzgKAs
// Component: GYWi95vLfh
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: b995Ls5eZP/component
import ActionIcon from "../../ActionIcon"; // plasmic-import: 7MQ1w3J5JA/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Ua1ivJLBAEJb/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_abc_framework.module.css"; // plasmic-import: vpcYHrXbsH6LUnbKFzgKAs/projectcss
import * as sty from "./PlasmicStudyProgram.module.css"; // plasmic-import: GYWi95vLfh/css
import ShortLeftsvgIcon from "./icons/PlasmicIcon__ShortLeftsvg"; // plasmic-import: -0ehSsBe3P/icon
import LogosvgIcon from "./icons/PlasmicIcon__Logosvg"; // plasmic-import: 67BwsWVLcL/icon

export const PlasmicStudyProgram__VariantProps = new Array();

export const PlasmicStudyProgram__ArgProps = new Array(
  "programStudyVisualizer",
  "programStudyInfo"
);

function PlasmicStudyProgram__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
      >
        <Header
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          className={classNames("__wab_instance", sty.header)}
          left={
            <React.Fragment>
              <ActionIcon
                data-plasmic-name={"actionIcon"}
                data-plasmic-override={overrides.actionIcon}
                className={classNames("__wab_instance", sty.actionIcon)}
                large={"large"}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <ShortLeftsvgIcon
                    className={classNames(defaultcss.all, sty.svg__nq7E)}
                    role={"img"}
                  />
                ) : null}

                <LogosvgIcon
                  className={classNames(defaultcss.all, sty.svg__o3D)}
                  role={"img"}
                />
              </ActionIcon>

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? false
                  : true
              ) ? (
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__fjwXm
                  )}
                >
                  {"ABC Framework"}
                </div>
              ) : null}
            </React.Fragment>
          }
        />

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__vilJb)}
        >
          <div className={classNames(defaultcss.all, sty.box__kgQf)}>
            <p.PlasmicSlot
              defaultContents={
                <div className={classNames(defaultcss.all, sty.box__q1I87)} />
              }
              value={args.programStudyVisualizer}
            />
          </div>

          <div className={classNames(defaultcss.all, sty.box__kwjGx)}>
            <p.PlasmicSlot
              defaultContents={
                <div className={classNames(defaultcss.all, sty.box__amywg)} />
              }
              value={args.programStudyInfo}
            />
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "header", "actionIcon"],
  header: ["header", "actionIcon"],
  actionIcon: ["actionIcon"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicStudyProgram__ArgProps,
      internalVariantPropNames: PlasmicStudyProgram__VariantProps
    });

    return PlasmicStudyProgram__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStudyProgram";
  } else {
    func.displayName = `PlasmicStudyProgram.${nodeName}`;
  }
  return func;
}

export const PlasmicStudyProgram = Object.assign(
  // Top-level PlasmicStudyProgram renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    actionIcon: makeNodeComponent("actionIcon"),
    // Metadata about props expected for PlasmicStudyProgram
    internalVariantProps: PlasmicStudyProgram__VariantProps,
    internalArgProps: PlasmicStudyProgram__ArgProps
  }
);

export default PlasmicStudyProgram;
/* prettier-ignore-end */
