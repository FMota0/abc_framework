// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vpcYHrXbsH6LUnbKFzgKAs
// Component: 7oi2b0yO2J
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: b995Ls5eZP/component
import ActionIcon from "../../ActionIcon"; // plasmic-import: 7MQ1w3J5JA/component
import Question from "../../Question"; // plasmic-import: he8jNy--bW/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Ua1ivJLBAEJb/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_abc_framework.module.css"; // plasmic-import: vpcYHrXbsH6LUnbKFzgKAs/projectcss
import * as sty from "./PlasmicTutorial.module.css"; // plasmic-import: 7oi2b0yO2J/css
import LogosvgIcon from "./icons/PlasmicIcon__Logosvg"; // plasmic-import: 67BwsWVLcL/icon

export const PlasmicTutorial__VariantProps = new Array();

export const PlasmicTutorial__ArgProps = new Array("questions");

function PlasmicTutorial__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
      >
        <Header
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          className={classNames("__wab_instance", sty.header)}
          left={
            <p.Stack
              as={"div"}
              data-plasmic-name={"logoArea"}
              data-plasmic-override={overrides.logoArea}
              hasGap={true}
              className={classNames(defaultcss.all, sty.logoArea)}
            >
              <ActionIcon
                data-plasmic-name={"actionIcon"}
                data-plasmic-override={overrides.actionIcon}
                large={"large"}
              >
                <LogosvgIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(defaultcss.all, sty.svg)}
                  role={"img"}
                />
              </ActionIcon>

              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? false
                  : true
              ) ? (
                <div
                  data-plasmic-name={"box"}
                  data-plasmic-override={overrides.box}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box
                  )}
                >
                  {"ABC Framework"}
                </div>
              ) : null}
            </p.Stack>
          }
        />

        <div
          data-plasmic-name={"view"}
          data-plasmic-override={overrides.view}
          className={classNames(defaultcss.all, sty.view)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"questions"}
            data-plasmic-override={overrides.questions}
            hasGap={true}
            className={classNames(defaultcss.all, sty.questions)}
          >
            <p.PlasmicSlot
              defaultContents={
                <React.Fragment>
                  <Question
                    className={classNames(
                      "__wab_instance",
                      sty.question__jQpWu
                    )}
                  />

                  <Question
                    className={classNames(
                      "__wab_instance",
                      sty.question__zhR6E
                    )}
                  />

                  <Question
                    answer={
                      "O framework ABC é uma maneira de se visualizar e organizar a composição de programas de pesquisas ... O framework ABC é uma maneira de se visualizar e organizar a composição de programas de pesquisas ... O framework ABC é uma maneira de se visualizar e organizar a composição de programas de pesquisas ... O framework ABC é uma maneira de se visualizar e organizar a composição de programas de pesquisas ...O framework ABC é uma maneira de se visualizar e organizar a composição de programas de pesquisas ..."
                    }
                    className={classNames(
                      "__wab_instance",
                      sty.question__joCiB
                    )}
                  />

                  <Question
                    className={classNames(
                      "__wab_instance",
                      sty.question__gSg0N
                    )}
                  />

                  <Question
                    className={classNames(
                      "__wab_instance",
                      sty.question__k1UVs
                    )}
                  />
                </React.Fragment>
              }
              value={args.questions}
            />
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "logoArea",
    "actionIcon",
    "svg",
    "box",
    "view",
    "questions"
  ],

  header: ["header", "logoArea", "actionIcon", "svg", "box"],
  logoArea: ["logoArea", "actionIcon", "svg", "box"],
  actionIcon: ["actionIcon", "svg"],
  svg: ["svg"],
  box: ["box"],
  view: ["view", "questions"],
  questions: ["questions"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTutorial__ArgProps,
      internalVariantPropNames: PlasmicTutorial__VariantProps
    });

    return PlasmicTutorial__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTutorial";
  } else {
    func.displayName = `PlasmicTutorial.${nodeName}`;
  }
  return func;
}

export const PlasmicTutorial = Object.assign(
  // Top-level PlasmicTutorial renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    logoArea: makeNodeComponent("logoArea"),
    actionIcon: makeNodeComponent("actionIcon"),
    svg: makeNodeComponent("svg"),
    box: makeNodeComponent("box"),
    view: makeNodeComponent("view"),
    questions: makeNodeComponent("questions"),
    // Metadata about props expected for PlasmicTutorial
    internalVariantProps: PlasmicTutorial__VariantProps,
    internalArgProps: PlasmicTutorial__ArgProps
  }
);

export default PlasmicTutorial;
/* prettier-ignore-end */
