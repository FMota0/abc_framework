// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vpcYHrXbsH6LUnbKFzgKAs
// Component: ryMEoCge3-
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_abc_framework.module.css"; // plasmic-import: vpcYHrXbsH6LUnbKFzgKAs/projectcss
import * as sty from "./PlasmicButton.module.css"; // plasmic-import: ryMEoCge3-/css

export const PlasmicButton__VariantProps = new Array("type", "size");

export const PlasmicButton__ArgProps = new Array("children");

function PlasmicButton__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__type_cinnabar]: hasVariant(variants, "type", "cinnabar"),
        [sty.root__type_crayola]: hasVariant(variants, "type", "crayola"),
        [sty.root__type_eee90]: hasVariant(variants, "type", "eee90"),
        [sty.root__type_vermillion]: hasVariant(variants, "type", "vermillion")
      })}
    >
      <button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames(defaultcss.button, sty.button, {
          [sty.button__size_large]: hasVariant(variants, "size", "large"),
          [sty.button__size_small]: hasVariant(variants, "size", "small"),
          [sty.button__type_cinnabar]: hasVariant(variants, "type", "cinnabar"),
          [sty.button__type_crayola]: hasVariant(variants, "type", "crayola"),
          [sty.button__type_eee90]: hasVariant(variants, "type", "eee90"),
          [sty.button__type_vermillion]: hasVariant(
            variants,
            "type",
            "vermillion"
          )
        })}
      >
        <p.PlasmicSlot
          defaultContents={"Click me"}
          value={args.children}
          className={classNames(sty.slotChildren, {
            [sty.slotChildren__size_small]: hasVariant(
              variants,
              "size",
              "small"
            ),

            [sty.slotChildren__type_cinnabar]: hasVariant(
              variants,
              "type",
              "cinnabar"
            ),

            [sty.slotChildren__type_crayola]: hasVariant(
              variants,
              "type",
              "crayola"
            ),

            [sty.slotChildren__type_eee90]: hasVariant(
              variants,
              "type",
              "eee90"
            ),

            [sty.slotChildren__type_vermillion]: hasVariant(
              variants,
              "type",
              "vermillion"
            )
          })}
        />
      </button>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "button"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButton__ArgProps,
      internalVariantPropNames: PlasmicButton__VariantProps
    });

    return PlasmicButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButton";
  } else {
    func.displayName = `PlasmicButton.${nodeName}`;
  }
  return func;
}

export const PlasmicButton = Object.assign(
  // Top-level PlasmicButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicButton
    internalVariantProps: PlasmicButton__VariantProps,
    internalArgProps: PlasmicButton__ArgProps
  }
);

export default PlasmicButton;
/* prettier-ignore-end */
