// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vpcYHrXbsH6LUnbKFzgKAs
// Component: aDdmyUpmHQB
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import ResearchCard from "../../ResearchCard"; // plasmic-import: wpvaXd42G3/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_abc_framework.module.css"; // plasmic-import: vpcYHrXbsH6LUnbKFzgKAs/projectcss
import * as sty from "./PlasmicSelectedStrategyResearches.module.css"; // plasmic-import: aDdmyUpmHQB/css
import EmptyBoxOpensvgIcon from "./icons/PlasmicIcon__EmptyBoxOpensvg"; // plasmic-import: X20V4F25sq/icon

export const PlasmicSelectedStrategyResearches__VariantProps = new Array(
  "empty"
);

export const PlasmicSelectedStrategyResearches__ArgProps = new Array(
  "researches"
);

function PlasmicSelectedStrategyResearches__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  null;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__empty]: hasVariant(variants, "empty", "empty")
      })}
    >
      {(hasVariant(variants, "empty", "empty") ? false : true) ? (
        <p.PlasmicSlot
          defaultContents={
            <React.Fragment>
              <ResearchCard
                className={classNames(
                  "__wab_instance",
                  sty.researchCard___2V5GQ
                )}
              />

              <ResearchCard
                className={classNames(
                  "__wab_instance",
                  sty.researchCard__l9Ur8
                )}
              />

              <ResearchCard
                className={classNames(
                  "__wab_instance",
                  sty.researchCard__hCQgL
                )}
              />

              <ResearchCard
                className={classNames(
                  "__wab_instance",
                  sty.researchCard__kfgCi
                )}
              />
            </React.Fragment>
          }
          value={args.researches}
        />
      ) : null}
      {(hasVariant(variants, "empty", "empty") ? true : false) ? (
        <p.Stack
          as={"div"}
          hasGap={hasVariant(variants, "empty", "empty") ? true : false}
          className={classNames(defaultcss.all, sty.box__taDLu, {
            [sty.box__empty__taDLuMJyfQ]: hasVariant(variants, "empty", "empty")
          })}
        >
          {(hasVariant(variants, "empty", "empty") ? true : false) ? (
            <EmptyBoxOpensvgIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(defaultcss.all, sty.svg, {
                [sty.svg__empty]: hasVariant(variants, "empty", "empty")
              })}
              role={"img"}
            />
          ) : null}
          {(hasVariant(variants, "empty", "empty") ? true : false) ? (
            <div
              className={classNames(defaultcss.all, sty.box___73Ycr, {
                [sty.box__empty___73YcrMJyfQ]: hasVariant(
                  variants,
                  "empty",
                  "empty"
                )
              })}
            >
              {(hasVariant(variants, "empty", "empty") ? true : false) ? (
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__ajuVc,
                    {
                      [sty.box__empty__ajuVcMJyfQ]: hasVariant(
                        variants,
                        "empty",
                        "empty"
                      )
                    }
                  )}
                >
                  {hasVariant(variants, "empty", "empty")
                    ? "Não há nenhuma pesquisa cadastrada com essa estratégia."
                    : "Enter some text"}
                </div>
              ) : null}
            </div>
          ) : null}
        </p.Stack>
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSelectedStrategyResearches__ArgProps,
      internalVariantPropNames: PlasmicSelectedStrategyResearches__VariantProps
    });

    return PlasmicSelectedStrategyResearches__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelectedStrategyResearches";
  } else {
    func.displayName = `PlasmicSelectedStrategyResearches.${nodeName}`;
  }
  return func;
}

export const PlasmicSelectedStrategyResearches = Object.assign(
  // Top-level PlasmicSelectedStrategyResearches renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicSelectedStrategyResearches
    internalVariantProps: PlasmicSelectedStrategyResearches__VariantProps,
    internalArgProps: PlasmicSelectedStrategyResearches__ArgProps
  }
);

export default PlasmicSelectedStrategyResearches;
/* prettier-ignore-end */
