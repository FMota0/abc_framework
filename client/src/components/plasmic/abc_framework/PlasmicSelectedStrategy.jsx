// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vpcYHrXbsH6LUnbKFzgKAs
// Component: p3zItY3nmn
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import SelectedStrategyResearches from "../../SelectedStrategyResearches"; // plasmic-import: aDdmyUpmHQB/component
import ResearchCard from "../../ResearchCard"; // plasmic-import: wpvaXd42G3/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_abc_framework.module.css"; // plasmic-import: vpcYHrXbsH6LUnbKFzgKAs/projectcss
import * as sty from "./PlasmicSelectedStrategy.module.css"; // plasmic-import: p3zItY3nmn/css
import EmptyBoxOpensvgIcon from "./icons/PlasmicIcon__EmptyBoxOpensvg"; // plasmic-import: X20V4F25sq/icon

export const PlasmicSelectedStrategy__VariantProps = new Array("empty");

export const PlasmicSelectedStrategy__ArgProps = new Array(
  "title",
  "description",
  "researches"
);

function PlasmicSelectedStrategy__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__empty]: hasVariant(variants, "empty", "empty")
      })}
    >
      <div className={classNames(defaultcss.all, sty.box__h40Fh)}>
        <p.PlasmicSlot
          defaultContents={"Nenhuma estratégia selecionada"}
          value={args.title}
          className={classNames(sty.slotTitle, {
            [sty.slotTitle__empty]: hasVariant(variants, "empty", "empty")
          })}
        />
      </div>

      {(hasVariant(variants, "empty", "empty") ? false : true) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__y5GNh, {
            [sty.box__empty__y5GNhojVp]: hasVariant(variants, "empty", "empty")
          })}
        >
          <p.PlasmicSlot
            defaultContents={
              "Essa estratégia é caracterizada por envolver .... aaaaa"
            }
            value={args.description}
            className={classNames(sty.slotDescription, {
              [sty.slotDescription__empty]: hasVariant(
                variants,
                "empty",
                "empty"
              )
            })}
          />

          <button
            data-plasmic-name={"more"}
            data-plasmic-override={overrides.more}
            className={classNames(
              defaultcss.button,
              defaultcss.__wab_text,
              sty.more
            )}
          >
            {"Saiba mais"}
          </button>
        </p.Stack>
      ) : null}
      {(hasVariant(variants, "empty", "empty") ? false : true) ? (
        <SelectedStrategyResearches
          data-plasmic-name={"selectedStrategyResearches"}
          data-plasmic-override={overrides.selectedStrategyResearches}
          className={classNames(
            "__wab_instance",
            sty.selectedStrategyResearches,
            {
              [sty.selectedStrategyResearches__empty]: hasVariant(
                variants,
                "empty",
                "empty"
              )
            }
          )}
          researches={
            <p.PlasmicSlot
              defaultContents={
                <React.Fragment>
                  <ResearchCard
                    className={classNames(
                      "__wab_instance",
                      sty.researchCard__juIds
                    )}
                  />

                  <ResearchCard
                    className={classNames(
                      "__wab_instance",
                      sty.researchCard__qQxYc
                    )}
                  />

                  <ResearchCard
                    className={classNames(
                      "__wab_instance",
                      sty.researchCard___5V0Di
                    )}
                  />

                  <ResearchCard
                    className={classNames(
                      "__wab_instance",
                      sty.researchCard__lnOjt
                    )}
                  />
                </React.Fragment>
              }
              value={args.researches}
            />
          }
        />
      ) : null}
      {(hasVariant(variants, "empty", "empty") ? true : false) ? (
        <EmptyBoxOpensvgIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(defaultcss.all, sty.svg, {
            [sty.svg__empty]: hasVariant(variants, "empty", "empty")
          })}
          role={"img"}
        />
      ) : null}
      {(hasVariant(variants, "empty", "empty") ? true : false) ? (
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__eiRqa,
            {
              [sty.box__empty__eiRqAojVp]: hasVariant(
                variants,
                "empty",
                "empty"
              )
            }
          )}
        >
          {hasVariant(variants, "empty", "empty")
            ? "Você não selecionou nenhuma estratégia de pesquisa. Utilize a visualização na área à esquerda para selecionar uma estratégia e visualizar sua informação correspondente."
            : "Enter some text"}
        </div>
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "more", "selectedStrategyResearches", "svg"],
  more: ["more"],
  selectedStrategyResearches: ["selectedStrategyResearches"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSelectedStrategy__ArgProps,
      internalVariantPropNames: PlasmicSelectedStrategy__VariantProps
    });

    return PlasmicSelectedStrategy__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelectedStrategy";
  } else {
    func.displayName = `PlasmicSelectedStrategy.${nodeName}`;
  }
  return func;
}

export const PlasmicSelectedStrategy = Object.assign(
  // Top-level PlasmicSelectedStrategy renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    more: makeNodeComponent("more"),
    selectedStrategyResearches: makeNodeComponent("selectedStrategyResearches"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicSelectedStrategy
    internalVariantProps: PlasmicSelectedStrategy__VariantProps,
    internalArgProps: PlasmicSelectedStrategy__ArgProps
  }
);

export default PlasmicSelectedStrategy;
/* prettier-ignore-end */
