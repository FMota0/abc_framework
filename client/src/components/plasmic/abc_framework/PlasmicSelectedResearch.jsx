// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vpcYHrXbsH6LUnbKFzgKAs
// Component: gK4A7lO4Rf
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import ColumnSpacer from "../../ColumnSpacer"; // plasmic-import: 08Del2QF4A/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_abc_framework.module.css"; // plasmic-import: vpcYHrXbsH6LUnbKFzgKAs/projectcss
import * as sty from "./PlasmicSelectedResearch.module.css"; // plasmic-import: gK4A7lO4Rf/css
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: mEOQMd16YT/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: da00zvXJE5/icon

export const PlasmicSelectedResearch__VariantProps = new Array();

export const PlasmicSelectedResearch__ArgProps = new Array(
  "title",
  "description"
);

function PlasmicSelectedResearch__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  null;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.PlasmicSlot
        defaultContents={"Programa de pesquisa"}
        value={args.title}
        className={classNames(sty.slotTitle)}
      />

      <p.PlasmicSlot
        defaultContents={"Exemplo de programa de estudo ...."}
        value={args.description}
        className={classNames(sty.slotDescription)}
      />

      <ColumnSpacer
        data-plasmic-name={"columnSpacer"}
        data-plasmic-override={overrides.columnSpacer}
        className={classNames("__wab_instance", sty.columnSpacer)}
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"options"}
        data-plasmic-override={overrides.options}
        hasGap={true}
        className={classNames(defaultcss.all, sty.options)}
      >
        <Icon2Icon
          data-plasmic-name={"edit"}
          data-plasmic-override={overrides.edit}
          className={classNames(defaultcss.all, sty.edit)}
          role={"img"}
        />

        <IconIcon
          data-plasmic-name={"_delete"}
          data-plasmic-override={overrides._delete}
          className={classNames(defaultcss.all, sty._delete)}
          role={"img"}
        />
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "columnSpacer", "options", "edit", "_delete"],
  columnSpacer: ["columnSpacer"],
  options: ["options", "edit", "_delete"],
  edit: ["edit"],
  _delete: ["_delete"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSelectedResearch__ArgProps,
      internalVariantPropNames: PlasmicSelectedResearch__VariantProps
    });

    return PlasmicSelectedResearch__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelectedResearch";
  } else {
    func.displayName = `PlasmicSelectedResearch.${nodeName}`;
  }
  return func;
}

export const PlasmicSelectedResearch = Object.assign(
  // Top-level PlasmicSelectedResearch renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columnSpacer: makeNodeComponent("columnSpacer"),
    options: makeNodeComponent("options"),
    edit: makeNodeComponent("edit"),
    _delete: makeNodeComponent("_delete"),
    // Metadata about props expected for PlasmicSelectedResearch
    internalVariantProps: PlasmicSelectedResearch__VariantProps,
    internalArgProps: PlasmicSelectedResearch__ArgProps
  }
);

export default PlasmicSelectedResearch;
/* prettier-ignore-end */
