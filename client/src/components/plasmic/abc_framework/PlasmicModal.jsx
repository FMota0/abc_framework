// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vpcYHrXbsH6LUnbKFzgKAs
// Component: DJ5ohi16iS
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: ryMEoCge3-/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_abc_framework.module.css"; // plasmic-import: vpcYHrXbsH6LUnbKFzgKAs/projectcss
import * as sty from "./PlasmicModal.module.css"; // plasmic-import: DJ5ohi16iS/css
import ClosesvgIcon from "./icons/PlasmicIcon__Closesvg"; // plasmic-import: 3CweqiMj9R/icon

export const PlasmicModal__VariantProps = new Array();

export const PlasmicModal__ArgProps = new Array("children");

function PlasmicModal__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"closeModal"}
        data-plasmic-override={overrides.closeModal}
        className={classNames(defaultcss.all, sty.closeModal)}
      >
        <ClosesvgIcon
          data-plasmic-name={"closeModalIcon"}
          data-plasmic-override={overrides.closeModalIcon}
          className={classNames(defaultcss.all, sty.closeModalIcon)}
          role={"img"}
        />
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"box"}
        data-plasmic-override={overrides.box}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box)}
      >
        <p.PlasmicSlot
          defaultContents={
            <React.Fragment>
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__yebzF
                )}
              >
                {"Adicione seu programa de pesquisa"}
              </div>

              <input
                className={classNames(defaultcss.input, sty.textbox___1BUd5)}
                placeholder={"Título"}
                size={1}
                type={"text"}
                value={""}
              />

              <textarea
                className={classNames(defaultcss.textarea, sty.textarea__rWfVl)}
                placeholder={"Descrição"}
                value={""}
              />

              <Button
                className={classNames("__wab_instance", sty.button__bk8M)}
              >
                {"Adicionar"}
              </Button>
            </React.Fragment>
          }
          value={args.children}
        />
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "closeModal", "closeModalIcon", "box"],
  closeModal: ["closeModal", "closeModalIcon"],
  closeModalIcon: ["closeModalIcon"],
  box: ["box"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicModal__ArgProps,
      internalVariantPropNames: PlasmicModal__VariantProps
    });

    return PlasmicModal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicModal";
  } else {
    func.displayName = `PlasmicModal.${nodeName}`;
  }
  return func;
}

export const PlasmicModal = Object.assign(
  // Top-level PlasmicModal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    closeModal: makeNodeComponent("closeModal"),
    closeModalIcon: makeNodeComponent("closeModalIcon"),
    box: makeNodeComponent("box"),
    // Metadata about props expected for PlasmicModal
    internalVariantProps: PlasmicModal__VariantProps,
    internalArgProps: PlasmicModal__ArgProps
  }
);

export default PlasmicModal;
/* prettier-ignore-end */
