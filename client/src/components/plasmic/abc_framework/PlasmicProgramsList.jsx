// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vpcYHrXbsH6LUnbKFzgKAs
// Component: MYCwyjoLXCa
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import ResearchProgramCard from "../../ResearchProgramCard"; // plasmic-import: VmjFCzlhl8/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_abc_framework.module.css"; // plasmic-import: vpcYHrXbsH6LUnbKFzgKAs/projectcss
import * as sty from "./PlasmicProgramsList.module.css"; // plasmic-import: MYCwyjoLXCa/css
import EmptyBoxOpensvgIcon from "./icons/PlasmicIcon__EmptyBoxOpensvg"; // plasmic-import: X20V4F25sq/icon

export const PlasmicProgramsList__VariantProps = new Array("empty");

export const PlasmicProgramsList__ArgProps = new Array("children", "message");

function PlasmicProgramsList__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  null;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__empty]: hasVariant(variants, "empty", "empty")
      })}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__aUBa9, {
          [sty.box__empty__aUBa9B2Nfe]: hasVariant(variants, "empty", "empty")
        })}
      >
        {(hasVariant(variants, "empty", "empty") ? false : true) ? (
          <p.PlasmicSlot
            defaultContents={
              <React.Fragment>
                <ResearchProgramCard
                  className={classNames(
                    "__wab_instance",
                    sty.researchProgramCard__yuI5E
                  )}
                />

                <ResearchProgramCard
                  className={classNames(
                    "__wab_instance",
                    sty.researchProgramCard___1Mt1Q
                  )}
                  description={"Scalable applications and its demands"}
                  registered={"Registered studies: 2/10"}
                  title={"Scalable applications"}
                />

                <ResearchProgramCard
                  className={classNames(
                    "__wab_instance",
                    sty.researchProgramCard__hqBif
                  )}
                />

                <ResearchProgramCard
                  className={classNames(
                    "__wab_instance",
                    sty.researchProgramCard__awigo
                  )}
                  description={
                    "A study program about how study methodology impacts students results A study program about how study methodology impacts students results"
                  }
                />

                <ResearchProgramCard
                  className={classNames(
                    "__wab_instance",
                    sty.researchProgramCard__bSm43
                  )}
                  description={
                    "A study program about how study methodology impacts students results A study program about how study methodology impacts students results"
                  }
                />
              </React.Fragment>
            }
            value={args.children}
          />
        ) : null}
        {(hasVariant(variants, "empty", "empty") ? true : false) ? (
          <EmptyBoxOpensvgIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(defaultcss.all, sty.svg, {
              [sty.svg__empty]: hasVariant(variants, "empty", "empty")
            })}
            role={"img"}
          />
        ) : null}
        {(hasVariant(variants, "empty", "empty") ? true : false) ? (
          <div
            className={classNames(defaultcss.all, sty.box__t83Nd, {
              [sty.box__empty__t83NDb2Nfe]: hasVariant(
                variants,
                "empty",
                "empty"
              )
            })}
          >
            <p.PlasmicSlot
              defaultContents={
                "Você não possui nenhum programa de pesquisa registrado. Utilize o botão no canto inferior direito para cadastrar um novo programa de pesquisa."
              }
              value={args.message}
              className={classNames(sty.slotMessage, {
                [sty.slotMessage__empty]: hasVariant(variants, "empty", "empty")
              })}
            />
          </div>
        ) : null}
      </p.Stack>

      {(hasVariant(variants, "empty", "empty") ? false : false) ? (
        <div
          className={classNames(defaultcss.all, sty.box__segvA, {
            [sty.box__empty__segvAb2Nfe]: hasVariant(variants, "empty", "empty")
          })}
        />
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProgramsList__ArgProps,
      internalVariantPropNames: PlasmicProgramsList__VariantProps
    });

    return PlasmicProgramsList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProgramsList";
  } else {
    func.displayName = `PlasmicProgramsList.${nodeName}`;
  }
  return func;
}

export const PlasmicProgramsList = Object.assign(
  // Top-level PlasmicProgramsList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicProgramsList
    internalVariantProps: PlasmicProgramsList__VariantProps,
    internalArgProps: PlasmicProgramsList__ArgProps
  }
);

export default PlasmicProgramsList;
/* prettier-ignore-end */
