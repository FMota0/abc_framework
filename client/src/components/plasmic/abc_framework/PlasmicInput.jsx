// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vpcYHrXbsH6LUnbKFzgKAs
// Component: mqLBwPJ93g
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_abc_framework.module.css"; // plasmic-import: vpcYHrXbsH6LUnbKFzgKAs/projectcss
import * as sty from "./PlasmicInput.module.css"; // plasmic-import: mqLBwPJ93g/css

export const PlasmicInput__VariantProps = new Array("invalid", "multiline");

export const PlasmicInput__ArgProps = new Array("label", "error");

function PlasmicInput__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        className={classNames(defaultcss.all, sty.box__oRuD, {
          [sty.box__invalid__oRuDeItxl]: hasVariant(
            variants,
            "invalid",
            "invalid"
          ),

          [sty.box__multiline__oRuDiibHm]: hasVariant(
            variants,
            "multiline",
            "multiline"
          )
        })}
      >
        <p.PlasmicSlot
          defaultContents={"Label"}
          value={args.label}
          className={classNames(sty.slotLabel, {
            [sty.slotLabel__invalid]: hasVariant(
              variants,
              "invalid",
              "invalid"
            ),

            [sty.slotLabel__invalid_multiline]:
              hasVariant(variants, "invalid", "invalid") &&
              hasVariant(variants, "multiline", "multiline"),
            [sty.slotLabel__multiline]: hasVariant(
              variants,
              "multiline",
              "multiline"
            )
          })}
        />

        {(hasVariant(variants, "multiline", "multiline") ? false : true) ? (
          <input
            data-plasmic-name={"textbox"}
            data-plasmic-override={overrides.textbox}
            className={classNames(defaultcss.input, sty.textbox, {
              [sty.textbox__invalid]: hasVariant(
                variants,
                "invalid",
                "invalid"
              ),

              [sty.textbox__multiline]: hasVariant(
                variants,
                "multiline",
                "multiline"
              )
            })}
            placeholder={"Digite aqui"}
            size={1}
            type={"text"}
            value={""}
          />
        ) : null}
        {(hasVariant(variants, "multiline", "multiline") ? true : false) ? (
          <textarea
            data-plasmic-name={"textarea"}
            data-plasmic-override={overrides.textarea}
            className={classNames(defaultcss.textarea, sty.textarea, {
              [sty.textarea__invalid_multiline]:
                hasVariant(variants, "invalid", "invalid") &&
                hasVariant(variants, "multiline", "multiline"),
              [sty.textarea__multiline]: hasVariant(
                variants,
                "multiline",
                "multiline"
              )
            })}
            placeholder={
              hasVariant(variants, "multiline", "multiline")
                ? "Digite aqui"
                : undefined
            }
            value={
              hasVariant(variants, "multiline", "multiline")
                ? ""
                : "This is a text area."
            }
          />
        ) : null}
        {(hasVariant(variants, "invalid", "invalid") ? true : false) ? (
          <div
            className={classNames(defaultcss.all, sty.box__g1ClC, {
              [sty.box__invalid__g1ClCeItxl]: hasVariant(
                variants,
                "invalid",
                "invalid"
              )
            })}
          >
            <p.PlasmicSlot
              defaultContents={"error"}
              value={args.error}
              className={classNames(sty.slotError, {
                [sty.slotError__invalid]: hasVariant(
                  variants,
                  "invalid",
                  "invalid"
                ),

                [sty.slotError__invalid_multiline]:
                  hasVariant(variants, "invalid", "invalid") &&
                  hasVariant(variants, "multiline", "multiline")
              })}
            />
          </div>
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "textbox", "textarea"],
  textbox: ["textbox"],
  textarea: ["textarea"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInput__ArgProps,
      internalVariantPropNames: PlasmicInput__VariantProps
    });

    return PlasmicInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInput";
  } else {
    func.displayName = `PlasmicInput.${nodeName}`;
  }
  return func;
}

export const PlasmicInput = Object.assign(
  // Top-level PlasmicInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textbox: makeNodeComponent("textbox"),
    textarea: makeNodeComponent("textarea"),
    // Metadata about props expected for PlasmicInput
    internalVariantProps: PlasmicInput__VariantProps,
    internalArgProps: PlasmicInput__ArgProps
  }
);

export default PlasmicInput;
/* prettier-ignore-end */
