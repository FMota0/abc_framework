// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vpcYHrXbsH6LUnbKFzgKAs
// Component: he8jNy--bW
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_abc_framework.module.css"; // plasmic-import: vpcYHrXbsH6LUnbKFzgKAs/projectcss
import * as sty from "./PlasmicQuestion.module.css"; // plasmic-import: he8jNy--bW/css
import ArrowDownSignToNavigatesvgIcon from "./icons/PlasmicIcon__ArrowDownSignToNavigatesvg"; // plasmic-import: Mb-85SPB-o/icon
import LeftArrowsvgIcon from "./icons/PlasmicIcon__LeftArrowsvg"; // plasmic-import: cvQbAFZHeA/icon

export const PlasmicQuestion__VariantProps = new Array("isClosed");

export const PlasmicQuestion__ArgProps = new Array("title", "answer");

function PlasmicQuestion__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__isClosed]: hasVariant(variants, "isClosed", "isClosed")
      })}
    >
      <div className={classNames(defaultcss.all, sty.box__mAjqu)}>
        <div
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          className={classNames(defaultcss.all, sty.header, {
            [sty.header__isClosed]: hasVariant(variants, "isClosed", "isClosed")
          })}
        >
          <p.PlasmicSlot
            defaultContents={"O que é o framework ABC?"}
            value={args.title}
            className={classNames(sty.slotTitle, {
              [sty.slotTitle__isClosed]: hasVariant(
                variants,
                "isClosed",
                "isClosed"
              )
            })}
          />

          <p.PlasmicIcon
            data-plasmic-name={"icon"}
            data-plasmic-override={overrides.icon}
            PlasmicIconType={
              hasVariant(variants, "isClosed", "isClosed")
                ? LeftArrowsvgIcon
                : ArrowDownSignToNavigatesvgIcon
            }
            className={classNames(defaultcss.all, sty.icon, {
              [sty.icon__isClosed]: hasVariant(variants, "isClosed", "isClosed")
            })}
            role={"img"}
          />
        </div>

        {(hasVariant(variants, "isClosed", "isClosed") ? false : true) ? (
          <div
            data-plasmic-name={"body"}
            data-plasmic-override={overrides.body}
            className={classNames(defaultcss.all, sty.body, {
              [sty.body__isClosed]: hasVariant(variants, "isClosed", "isClosed")
            })}
          >
            <div className={classNames(defaultcss.all, sty.box__jzDuG)}>
              <p.PlasmicSlot
                defaultContents={
                  "O framework ABC é uma maneira de se visualizar e organizar a composição de programas de pesquisas ..."
                }
                value={args.answer}
                className={classNames(sty.slotAnswer)}
              />
            </div>
          </div>
        ) : null}
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "header", "icon", "body"],
  header: ["header", "icon"],
  icon: ["icon"],
  body: ["body"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicQuestion__ArgProps,
      internalVariantPropNames: PlasmicQuestion__VariantProps
    });

    return PlasmicQuestion__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicQuestion";
  } else {
    func.displayName = `PlasmicQuestion.${nodeName}`;
  }
  return func;
}

export const PlasmicQuestion = Object.assign(
  // Top-level PlasmicQuestion renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    icon: makeNodeComponent("icon"),
    body: makeNodeComponent("body"),
    // Metadata about props expected for PlasmicQuestion
    internalVariantProps: PlasmicQuestion__VariantProps,
    internalArgProps: PlasmicQuestion__ArgProps
  }
);

export default PlasmicQuestion;
/* prettier-ignore-end */
